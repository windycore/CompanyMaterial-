// ---------------------------------------------------------------------------
// 
//
// $RCSfile: halUICtrlAPI.h,v $
// $Revision: 1.0 $
// $Author: tding $
// $Date: 20150808 9:15:54] $
//
/* ---------------- BEGIN CUSTOM AREA [000] halUICtrlAPI.h -------------------
 * Custom File Revision Information                                         */
/* ---------------------------- END CUSTOM AREA --------------------------- */

#ifndef _HALUICTRLAPI_H_
#define _HALUICTRLAPI_H_

#include "MainApp.h"

// ---------------------------------------------------------------------------
// Definitions for key types
// ---------------------------------------------------------------------------
#define HALUICTRL_TYPE_KEYPAD       0
#define HALUICTRL_TYPE_IR           1

// ---------------------------------------------------------------------------
// Key event condition flags
// ---------------------------------------------------------------------------
#define KEY_PRESS          (1 << 0)
#define KEY_HOLD           (1 << 1)
#define KEY_REPEAT         (1 << 2)
#define KEY_RELEASE        (1 << 3)
#define KEY_REL_AFTER      (1 << 4)
// ***************************************************************************
// ****************** START OF PUBLIC PROCEDURE DEFINITIONS ******************
// ***************************************************************************
typedef enum
{
    /* CONFIGURATION: Add user input events here */
    keNONE,
    // keep order
    keIN1,
    keIN2,
    keIN3,
    keIN4,
    keIN5,
    keIN6,
    keIN7,
    keIN8,
    keOUT1,
    keOUT2,
    keOUT3,
    keOUT4,
    keOUT5,
    keOUT6,
    keOUT7,
    keOUT8,
    keALL,
    keEDID,
    keCLEAR,
    keENTER,
    keEDID_LONG,
    keENTER_LONG,
    keStandBy,
    // RTI ADD BELOW CODE, must be keep order  
    ke1TO1,
    ke1TO2,
    ke1TO3,
    ke1TO4,
    ke1TO5,
    ke1TO6,
    ke1TO7,
    ke1TO8,
    ke2TO1,
    ke2TO2,
    ke2TO3,
    ke2TO4,
    ke2TO5,
    ke2TO6,
    ke2TO7,
    ke2TO8,
    ke3TO1,
    ke3TO2,
    ke3TO3,
    ke3TO4,
    ke3TO5,
    ke3TO6,
    ke3TO7,
    ke3TO8,
    ke4TO1,
    ke4TO2,
    ke4TO3,
    ke4TO4,
    ke4TO5,
    ke4TO6,
    ke4TO7,
    ke4TO8,
    // RTI ADD BELOW CODE, must be keep order 
    ke5TO1,
    ke5TO2,
    ke5TO3,
    ke5TO4,
    ke5TO5,
    ke5TO6,
    ke5TO7,
    ke5TO8,
    ke6TO1,
    ke6TO2,
    ke6TO3,
    ke6TO4,
    ke6TO5,
    ke6TO6,
    ke6TO7,
    ke6TO8,
    ke7TO1,
    ke7TO2,
    ke7TO3,
    ke7TO4,
    ke7TO5,
    ke7TO6,
    ke7TO7,
    ke7TO8,
    ke8TO1,
    ke8TO2,
    ke8TO3,
    ke8TO4,
    ke8TO5,
    ke8TO6,
    ke8TO7,
    ke8TO8,
    
    ke1TOALL,
    ke2TOALL,
    ke3TOALL,
    ke4TOALL,

    keInOut1_LONG,


/* ---------------------------- END CUSTOM AREA --------------------------- */
    keINVALID                          // used for enumerated type range
                                       // checking (DO NOT REMOVE)
} eKEY;



// ---------------------------------------------------------------------------
// User input event structure (key and repeat count)
// ---------------------------------------------------------------------------
typedef struct
{
    eKEY                eKey;          // user input event
    BYTE                cCount;        // event repeat count
    BYTE                cType;         // 0:keypad 1:IR
} KEY_EVENT, *PKEY_EVENT;

// ---------------------------------------------------------------------------
// Key event lookup table entry structure
// ---------------------------------------------------------------------------
typedef struct
{
    WORD                wKeycode;      // keycode received from input device
    BYTE                cConditions;   // bitfield of key event condition
                                       // flags
    eKEY                ePressKey;     // key event generated by PRESS
                                       // condition
    eKEY                eHoldKey;      // key event generated by HOLD or
                                       // REPEAT condition
    eKEY                eReleaseKey;   // key event generated by RELEASE
                                       // condition
    eKEY                eRelAfterKey;  // key event generated by RELEASE_AFTER
                                       // condition
    BYTE                cHoldCount;    // threshold for HOLD or REPEAT event
    BYTE                cRelCount;     // threshold for RELEASE or
                                       // RELEASE_AFTER event
} KEY_LOOKUP;
typedef const KEY_LOOKUP *PCKEY_LOOKUP;

// ---------------------------------------------------------------------------
// This API handles timer events for keypad polling.
//
// Params:
//  eEvent : Type of event
//  cIdent : Event identifier
//
// Return: none
// ---------------------------------------------------------------------------
bool_t halUICtrlEventHandler(void);

// ---------------------------------------------------------------------------
// This API is the interrupt handler for specified infrared receiver.
//
// Params:
//  cIRNum : IR Receiver receiving the interrupt
//
// Return: none
// ---------------------------------------------------------------------------

void halUICtrlKeyEnalbe(BOOL  Enable);
bool_t Init_Key_module(BYTE MsgId);

typedef enum _KeyOpcodes_t       // CEC Messages
{
    // sLEDx_FLICKER   = 0x100,
   //     sIR_Ctrl= 0x200,
   //switch  Messages  = 0x300
   // Key  Messages  =0x400
       eKeyLock=0x400,
       eInputKeyLock,
   // UART  Messages  =0x500

}KeyOpcodes_t;

// ---------------------------------------------------------------------------
// User input event structure (key and repeat count)
// ---------------------------------------------------------------------------
typedef struct
{
    bool_t  Enable;          // Demo  executive 
    
} Key_LOCK_EVENT, *PKey_LOCK_EVENT;

#endif // _HALUICTRLAPI_H_

